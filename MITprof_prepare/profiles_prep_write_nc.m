function [varargout]=profiles_prep_write_nc(dataset,profileCur,mode,varargin);
% [MITprofCur]=profiles_prep_write_nc(dataset,profileCur,mode,(MITprofCur))
%  function used to write data in the MITprof netcdf format
%
%   dataset : structure describing the dataset (generated by
%       profiles_prep_select)
%   profileCur : structure with profile data to record
%   mode : string describing the mode to be used
%       'init' : initialize global variables
%               (in this mode, profileCur is not recorded)
%       'add' : record the profile in the global variables
%       'write' : write data from the global variables to the netcdf file
%
% Important: this function use global variables, that must not be changed
%   before the end of the writing process!!
%

dirOut=dataset.dirOut;
fileOut=dataset.fileOut;
fill_value_output=dataset.fillval;
dmod=dataset.z_std;

buffer_size=dataset.buffer_size;
nb_lev=length(dmod);
nb_char=30;


if fill_value_output~=-9999;
    fprintf('MITgcm assumes fill_value_output=-9999 \n');
    return;
end

switch mode,
    
    case 'init',
        
        % init global variables
        MITprofCur=MITprof_struct(buffer_size,dataset);
        MITprofCur.num_cur_tmpfile=0;
        MITprofCur.np=0;
        
        %reset auxiliary files created during a previous computation:
        test0=dir([dataset.dirOut dataset.fileOut '*.mat']);
        if ~isempty(test0);
            system(['rm ' dataset.dirOut dataset.fileOut '*.mat']);
        end;
        
        varargout{1}=MITprofCur;
        
        
    case 'add',
        
        % retrieve buffer
        MITprofCur=varargin{1};
        
        % number of profiles +1
        pp=MITprofCur.np+1;
        MITprofCur.np=pp;
        
        % store profile data
        MITprofCur.prof_YYYYMMDD(pp)=profileCur.ymd;
        MITprofCur.prof_HHMMSS(pp)=profileCur.hms;
        MITprofCur.prof_descr{pp}=profileCur.pnum_txt;
        MITprofCur.prof_lon(pp)=profileCur.lon;
        MITprofCur.prof_lat(pp)=profileCur.lat;
        MITprofCur.prof_point(pp)=profileCur.point;
        MITprofCur.prof_basin(pp)=profileCur.basin;
        
        var_out={dataset.var_out{2:end}};
        for ii=1:length(var_out);
            eval(['MITprofCur.prof_' var_out{ii} '(pp,:)=profileCur.' var_out{ii} '_std;']);
            eval(['MITprofCur.prof_' var_out{ii} 'flag(pp,:)=profileCur.' var_out{ii} '_test;']);
            eval(['MITprofCur.prof_' var_out{ii} 'weight(pp,:)=profileCur.' var_out{ii} '_w;']);
            if isfield(profileCur,[var_out{ii} 'E_std']);
                eval(['MITprofCur.prof_' var_out{ii} 'err(pp,:)=profileCur.' var_out{ii} 'E_std;']);
            elseif(isfield(MITprofCur,['prof_' var_out{ii} 'err']));
                MITprofCur=rmfield(MITprofCur,['prof_' var_out{ii} 'err']);
            end;
            eval(['MITprofCur.prof_' var_out{ii} 'estim(pp,:)=profileCur.' var_out{ii} '_equi;']);
        end;
        
        if ~strcmp(dataset.coord,'depth');
            MITprofCur.prof_D(pp,:)=profileCur.depth_std;
            MITprofCur.prof_Destim(pp,:)=profileCur.depth_equi;
        end;
        
        % if buffer is full, save profiles in a .mat temporary file
        if pp>buffer_size-1,
            MITprofCur.prof_date=datenum(num2str(MITprofCur.prof_YYYYMMDD*1e6+MITprofCur.prof_HHMMSS),'yyyymmddHHMMSS');
            num_cur_tmpfile=MITprofCur.num_cur_tmpfile+1;
            eval(['save ' dirOut '/' fileOut num2str(num_cur_tmpfile) '.mat MITprofCur' ]);
            MITprofCur=MITprof_struct(buffer_size,dataset);
            MITprofCur.num_cur_tmpfile=num_cur_tmpfile;
            MITprofCur.np=0;
        end;
        
        varargout{1}=MITprofCur;
        
        
    case 'write',
        
        % retrieve buffer
        MITprofCur=varargin{1};
        
        % save profiles in buffer
        MITprofCur=MITprof_subset(MITprofCur,'list',1:MITprofCur.np);
        MITprofCur.prof_date=datenum(num2str(MITprofCur.prof_YYYYMMDD*1e6+MITprofCur.prof_HHMMSS),'yyyymmddHHMMSS');
        num_cur_tmpfile=MITprofCur.num_cur_tmpfile+1;
        eval(['save ' dirOut '/' fileOut num2str(num_cur_tmpfile) '.mat MITprofCur' ]);
        
        % build the MITprof variable with all profiles
        MITprof_final=MITprof_struct(0,dataset);
        for cur_tmpfile=1:num_cur_tmpfile,
            eval(['load ' dirOut fileOut num2str(cur_tmpfile) '.mat;' ]);
            var_out={dataset.var_out{2:end}};
            for ii=1:length(var_out);
                tmp1=['prof_' var_out{ii} 'err'];
                if isfield(MITprof_final,tmp1)&~isfield(MITprofCur,tmp1);
                    MITprof_final=rmfield(MITprof_final,tmp1);
                end;
            end;
            MITprof_final=MITprof_concat(MITprof_final,MITprofCur);
        end

        %add grid information
        if dataset.addGrid;
          MITprof_final=profiles_prep_locate(dataset,MITprof_final);
        end;
        
        %write data to file:
        nb_prof=length(MITprof_final.prof_lon);
        if nb_prof~=0, MITprof_write([dirOut fileOut],MITprof_final); end
        
        % clean folders
        for cur_tmpfile=1:num_cur_tmpfile
            system(['rm -f ' dirOut '/' fileOut num2str(cur_tmpfile) '.mat;' ]);
        end
        
end

